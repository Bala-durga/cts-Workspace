package com.cts.slap.dao;

import com.cts.slap.model.Student;
import com.cts.slap.util.ConnectionProvider;
import com.cts.slap.exception.StudentLogException;


import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

//import org.apache.log4j.Logger;

public class StudentDAOJDBCImpl implements StudentDAO {

	ConnectionProvider conProvider;
	//Logger log;

	public StudentDAOJDBCImpl() throws StudentLogException {
		// log = Logger.getLogger("dao");
		try {
			conProvider = ConnectionProvider.getInstance();
		} catch (ClassNotFoundException | IOException exp) {
			//log.error(exp);
			throw new StudentLogException("Database is not reachable");
		}
	}
	@Override
	public String add(Student student) throws StudentLogException {
		String sid = null;
		if (student != null) {
			try (Connection con = conProvider.getConnection();
					PreparedStatement pInsert = con
							.prepareStatement(IQueryMapper.ADD_STUDENT_QRY)) {

				pInsert.setString(1, student.getSid());
				pInsert.setString(2, student.getSname());
				pInsert.setDouble(3, student.getFee());
				pInsert.setDate(4, Date.valueOf(student.getJoinDate()));

				int rowCount = pInsert.executeUpdate();

				if (rowCount == 1) {
					sid = student.getSid();
				}
			} catch (SQLException exp) {
				//log.error(exp);
				throw new StudentLogException("Student is not inserted" + exp);
			}
		}
		return sid;
	}
	@Override
	public boolean delete(String sid) throws StudentLogException {
		boolean isDone = false;

		try (Connection con = conProvider.getConnection();
				PreparedStatement pDelete = con
						.prepareStatement(IQueryMapper.DEL_STUDENT_QRY)) {

			pDelete.setString(1, sid);

			int rowCount = pDelete.executeUpdate();

			if (rowCount == 1) {
				isDone = true;
			}
		} catch (SQLException exp) {
			//log.error(exp);
			throw new StudentLogException("Student is not inserted");
		}

		return isDone;
	}
	@Override
	public Student get(String sid) throws StudentLogException {
		Student student=null;
		try (Connection con = conProvider.getConnection();
				PreparedStatement pSelect = con
						.prepareStatement(IQueryMapper.GET_STUDENT_QRY)) {

			pSelect.setString(1, sid);

			ResultSet rs = pSelect.executeQuery();
			
			if(rs.next()){
				student = new Student();
				student.setSid(rs.getString("Sid"));
				student.setSname(rs.getString("Sname"));
				student.setFee(rs.getDouble("fee"));
				student.setJoinDate(rs.getDate("Joindate").toLocalDate());
			}
			
		} catch (SQLException exp) {
			//log.error(exp);
			throw new StudentLogException("Student is not available");
		}		
		return student;
	}
	@Override
	public List<Student> getAll() throws StudentLogException {
		List<Student> students=null;
		try (Connection con = conProvider.getConnection();
				PreparedStatement pSelect = con
						.prepareStatement(IQueryMapper.GET_ALL_STUDENT_QRY)) {

			ResultSet rs = pSelect.executeQuery();
			
			students = new ArrayList<Student>();
			
			while(rs.next()){
				Student student = new Student();
				student.setSid(rs.getString("sid"));
				student.setSname(rs.getString("sname"));
				student.setFee(rs.getDouble("fee"));
				student.setJoinDate(rs.getDate("joindate").toLocalDate());
				students.add(student);
			}
			
		} catch (SQLException exp) {
			//log.error(exp);
			throw new StudentLogException("No Students are available.");
		}		
		return students;	
	}
	@Override
	public boolean update(Student student) throws StudentLogException {
		boolean isDone = false;
		if (student != null) {
			try (Connection con = conProvider.getConnection();
					PreparedStatement pUpdate = con
							.prepareStatement(IQueryMapper.MODIFY_STUDENT_QRY)) {

				
				pUpdate.setString(1, student.getSname());
				pUpdate.setDouble(2, student.getFee());
				pUpdate.setDate(3, Date.valueOf(student.getJoinDate()));
				pUpdate.setString(4, student.getSid());
				

				int rowCount = pUpdate.executeUpdate();

				if (rowCount == 1) {
					isDone = true;
				}
			} catch (SQLException exp) {
				//log.error(exp);
				throw new StudentLogException("Book is not updated.");
			}
		}
		return isDone;
	}
	@Override
	public void persist() throws StudentLogException {
		/* no implementation required */
		
	}
}